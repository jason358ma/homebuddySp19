{"version":3,"sources":["logo.svg","Map.js","MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mapStyles","position","width","height","left","top","searchboxStyles","background-color","Map","React","Component","_React$Component2","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getBuddy","axios","post","then","response","console","log","data","loadMap","google","maps","mapRef","refs","map","node","ReactDOM","findDOMNode","zoom","_this2$state$currentL","state","currentLocation","lat","lng","center","LatLng","mapConfig","assign","directionsDisplay","setMap","input","document","getElementById","searchBox","places","SearchBox","controls","ControlPosition","TOP_LEFT","push","markers","addListener","getPlaces","length","forEach","marker","place","geometry","icon","url","size","Size","origin","Point","anchor","scaledSize","Marker","assertThisInitialized","title","name","location","getLatLng","Promise","resolve","reject","value","setState","destination","startLat","startLong","long","destLat","destLong","getLatLngCallback","displayRoute","_this2$props$initialC","initialCenter","directionsService","DirectionsService","DirectionsRenderer","inherits","createClass","key","_this3","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","prevProps","prevState","recenterMap","_this4","route","travelMode","TravelMode","status","setDirections","window","alert","current","panTo","_this5","children","Children","c","cloneElement","mapCenter","style","stylesearchbar","react_default","a","createElement","id","class","type","placeholder","ref","defaultProps","visible","MapContainer","_Component","_getPrototypeOf2","_this","_len","arguments","args","Array","_key","apply","concat","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","e","onClose","src_Map","GoogleApiWrapper","apiKey","Signup","submitClicked","email","username","password","firstName","first","lastName","last","loginClicked","handleChange","bind","event","target","className","react_router_dom","src","logo","alt","onChange","onClick","to","react_router","path","component","Boolean","hostname","match","render","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.545b2dc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// pacinputimport React from 'react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\n\nconst mapStyles = {\n    map: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        left: '0px',\n        top: '0px'\n    }\n};\n\nconst searchboxStyles = {\n    searchbox: {\n        'background-color': '#ffffff',\n        position: 'absolute',\n        width: '8%',\n        height: '8%',\n        left: '0px',\n        top: '0px'\n    }\n    // searchbox: {\n    //       background-color: '#fff';\n    //       fontFamily: 'Roboto';\n    //       fontSize: '15px';\n    //       fontWeight: '300';\n    //       marginLeft: '12px';\n    //       padding: '0 11px 0 13px';\n    //     //   textOverflow: 'ellipsis';\n    //       position: 'absolute',\n    //       width: '30%'\n    //       top: '0px';\n    //       left: '0px'\n    //   }\n};\n\nclass searchBox extends React.Component {\n    constructor(props) {\n\n    }\n}\n\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n\n    const directionsService = new this.props.google.maps.DirectionsService();\n    const directionsDisplay = new this.props.google.maps.DirectionsRenderer();\n    // const searchBox = new this.props.google.maps.places.SearchBox();\n    var searchBox = new this.props.google.maps.places.SearchBox(document.getElementById('pac-input'));\n\n\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      },\n      destination: {\n          lat: 37.868112,\n          lng: -122.255033\n      },\n      directionsService : directionsService,\n      directionsDisplay : directionsDisplay,\n      searchBox : searchBox,\n    };\n  }\n\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n          this.loadMap()\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\ngetBuddy = () => {\n  axios.post(\"/findBuddy\", {\n  }).then(response => {\n      console.log(\"buddy name: \" + response.data);\n  })\n}\n\n  loadMap = () => {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      let { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n      this.state.directionsDisplay.setMap(this.map);\n\n    //   let destination = { //unit 1\n    //     lat: 37.868112,\n    //     lng: -122.255033\n    //   }\n    //   this.displayRoute(destination);\n\n      var input = document.getElementById('pac-input');\n      var searchBox = new google.maps.places.SearchBox(input)\n      this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n      var markers = [];\n\n      searchBox.addListener('places_changed', () => {\n          var places = searchBox.getPlaces();\n          if (places.length == 0) {\n              return;\n          }\n          markers.forEach(function(marker) {\n              marker.setMap(null);\n          });\n          markers = [];\n        //   for each new place, get icon name and location\n        //   var bounds = google.LatLngBounds();\n          places.forEach((place) => {\n              if (!place.geometry) {\n                console.log(\"Returned place contains no geometry\");\n                return;\n              }\n              var icon = {\n                  url: place.icon,\n                  size: google.maps.Size(71, 71),\n                  origin: google.maps.Point(0, 0),\n                  anchor: google.maps.Point(17, 34),\n                  scaledSize: google.maps.Size(25, 25)\n              }\n            //   Create a marker for each place.\n              markers.push(new google.maps.Marker({\n                  map: this,\n                //   i called this.map earlier didnt work\n                  icon: icon,\n                  title: place.name,\n                  position: place.geometry.location\n              }));\n            //   console.log(place.geometry.location.lat())\n            //   console.log(place.geometry.location.lng())\n            //   destination = {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()}\n\n              var getLatLng = new Promise(function(resolve, reject) {\n                  var lat = place.geometry.location.lat()\n                  var lng = place.geometry.location.lng()\n                  var dest = {lat, lng}\n                  resolve(dest)\n              })\n\n              var getLatLngCallback = (value) => {\n                  console.log(\"value:\")\n                  console.log(value)\n                  console.log(this.state)\n                  console.log(\"state\")\n                  this.setState((state) => {\n                      return {destination: value}\n                  }, () => {\n                      console.log(this.state.destination)\n\n                      axios.post(\"/coordinates\", {\n                          startLat: this.state.currentLocation.lat,\n                          startLong: this.state.currentLocation.long,\n                          destLat: this.state.destination.lat,\n                          destLong: this.state.destination.long,\n                      }).then(response => {\n                          console.log(response.data);\n                      })\n\n                      this.loadMap()\n                  });\n              }\n\n              getLatLng.then((value) => {\n                //   console.log(\"value:\")\n                //   console.log(value)\n                //   console.log(this.state)\n                //   console.log(\"state\")\n                //   this.setState((state) => {\n                //       return {destination: value}\n                //   }, () => {\n                //       console.log(this.state.destination)\n                //       this.loadMap()\n                //   });\n                getLatLngCallback(value)\n              })\n\n            //   if (place.geometry.viewport) {\n            //       // Only geocodes have viewport.\n            //       bounds.union(place.geometry.viewport);\n            //     } else {\n            //       bounds.extend(place.geometry.location);\n            //     }\n          })\n        //   this.map.fitBounds(bounds)\n\n    });\n      console.log(this.state)\n      this.displayRoute(this.state.destination)\n    //  need to call displayRoute here\n    }\n}\n\n\ndisplayRoute(destination) { //display route from current location to specified destination\n    this.state.directionsService.route({\n        origin: new this.props.google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng),\n        destination: new this.props.google.maps.LatLng(destination.lat, destination.lng),\n        travelMode: this.props.google.maps.TravelMode['WALKING']\n        }, (response, status) => {\n            if (status === 'OK') {\n                console.log(this.state.currentLocation);\n                this.state.directionsDisplay.setDirections(response);\n\n            } else {\n                window.alert('Directions request failed due to: ' + status);\n            }\n        })\n  }\n\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n\n  renderChildren() {\n    const { children } = this.props;\n    console.log(\"children: \" + children);\n\n    if (!children) return;\n\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    // console.log(this.props);\n    const style = Object.assign({}, mapStyles.map);\n    const stylesearchbar = Object.assign({}, searchboxStyles.searchbox);\n\n    return (\n      <div>\n          <div style={stylesearchbar}>\n            <input id=\"pac-input\" class=\"controls\" type=\"text\" placeholder=\"Search box\"/>\n          </div>\n          <div>\n              <button id=\"search-button\">Find Buddy!</button>\n          </div>\n        <div id=\"map\" style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {/*{this.renderChildren()}*/}\n      </div>\n    );\n  }\n}\n\nexport default Map;\n\n\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 37.871295,\n    lng: -122.260314\n  },\n  centerAroundCurrentLocation: true,\n  visible: true\n};\n","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport { InfoWindow, Marker } from 'google-maps-react';\nimport CurrentLocation from './Map';\nimport Places from 'google-maps-react';\nimport ReactDOM from 'react-dom';\n\nexport class MapContainer extends Component {\n\n    state = {\n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedPlace: {}\n    };\n\n    onMarkerClick = (props, marker, e) =>\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n\n    onClose = props => {\n        if (this.state.showingInfoWindow === true) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null,\n            });\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n            <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\n            </CurrentLocation>\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDfaCamdV4CSw1jBTG8NZeem0YG6kguM3s'\n})(MapContainer);\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport MapContainer from './MapContainer.js'\n\n// import {GoogleApiComponent} from 'google-maps-react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport { InfoWindow, Marker } from 'google-maps-react';\nimport CurrentLocation from './Map';\nimport Places from 'google-maps-react';\nimport axios from 'axios';\n\nimport ReactDOM from 'react-dom';\n// import * as ReactDOM from 'react-dom'\n\nclass Signup extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {username: 'u', password: 'p', first: 'f', last: 'l'};\n\n      this.handleChange = this.handleChange.bind(this);\n      this.submitClicked= this.submitClicked.bind(this);\n    }\n\n    handleChange(event) {\n        switch (event.target.id) {\n            case \"username\":\n                this.setState({username: event.target.value});\n                break;\n            case \"password\":\n                this.setState({password: event.target.value});\n                break;\n            case \"first\":\n                this.setState({first: event.target.value});\n                break;\n            case \"last\":\n                this.setState({last: event.target.value});\n        }\n        console.log(event.target.id)\n    }\n\n    submitClicked = () => {\n        alert('submit clicked!')\n        console.log(this.state)\n\n        axios.post(\"/signup\", {\n            email: this.state.username,\n            password: this.state.password,\n            firstName: this.state.first,\n            lastName: this.state.last\n        }).then(response => {\n            console.log(response.data);\n        })\n    }\n\n    loginClicked = () => {\n      axios.post(\"/signin\", {\n          email: this.state.username,\n          password: this.state.password,\n      }).then(response => {\n          console.log(response.data);\n      })\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Router>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n            <label> Username:\n            <input type=\"text\" id=\"username\" username={this.state.username} onChange={this.handleChange} />\n          </label>\n\n          <label> Password:\n          <input type=\"text\" id=\"password\" password={this.state.password} onChange={this.handleChange} />\n          </label>\n\n          <label> First:\n          <input type=\"text\" id=\"first\" first={this.state.first} onChange={this.handleChange} />\n        </label>\n\n        <label> Last:\n        <input type=\"text\" id=\"last\" last={this.state.last} onChange={this.handleChange} />\n      </label>\n          <br/>\n          <input type=\"submit\" username=\"Submit\" onClick={this.submitClicked}/>\n            <Link to=\"/Map\">\n              <button username=\"login\" id=\"loginbutton\" onClick={this.loginClicked}>LOGIN</button>\n            </Link>\n            <Route path=\"/Map/\" component={MapContainer} />\n        </header>\n        </Router>\n      </div>\n\n    );\n  }\n}\n\nSignup.defaultProps = {\n    value: '',\n    username: \"username\",\n    password: \"password\"\n}\nexport default Signup\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","Map.js","MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mapStyles","position","width","height","left","top","searchboxStyles","background-color","Map","React","Component","_React$Component2","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadMap","google","maps","mapRef","refs","map","node","ReactDOM","findDOMNode","zoom","_this2$state$currentL","state","currentLocation","lat","lng","center","LatLng","mapConfig","assign","directionsDisplay","setMap","input","document","getElementById","searchBox","places","SearchBox","controls","ControlPosition","TOP_LEFT","push","markers","addListener","_this3","getPlaces","length","forEach","marker","place","geometry","icon","url","size","Size","origin","Point","anchor","scaledSize","Marker","title","name","location","console","log","getLatLng","Promise","resolve","reject","then","value","setState","destination","getLatLngCallback","displayRoute","_this2$props$initialC","initialCenter","directionsService","DirectionsService","DirectionsRenderer","inherits","createClass","key","_this4","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","prevProps","prevState","recenterMap","_this5","route","travelMode","TravelMode","response","status","setDirections","window","alert","current","panTo","_this6","children","Children","c","cloneElement","mapCenter","style","stylesearchbar","react_default","a","createElement","id","class","type","placeholder","ref","renderChildren","defaultProps","visible","MapContainer","_Component","_getPrototypeOf2","_this","_len","arguments","args","Array","_key","apply","concat","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","e","onClose","src_Map","GoogleApiWrapper","apiKey","Signup","submitClicked","axios","post","email","username","password","firstName","first","lastName","last","data","loginClicked","handleChange","bind","assertThisInitialized","event","target","className","react_router_dom","src","logo","alt","onChange","onClick","to","react_router","path","component","Boolean","hostname","match","render","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.082533e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// pacinputimport React from 'react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nconst mapStyles = {\r\n    map: {\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        left: '0px',\r\n        top: '0px'\r\n    }\r\n};\r\n\r\nconst searchboxStyles = {\r\n    searchbox: {\r\n        'background-color': '#ffffff',\r\n        position: 'absolute',\r\n        width: '8%',\r\n        height: '8%',\r\n        left: '0px',\r\n        top: '0px'\r\n    }\r\n    // searchbox: {\r\n    //       background-color: '#fff';\r\n    //       fontFamily: 'Roboto';\r\n    //       fontSize: '15px';\r\n    //       fontWeight: '300';\r\n    //       marginLeft: '12px';\r\n    //       padding: '0 11px 0 13px';\r\n    //     //   textOverflow: 'ellipsis';\r\n    //       position: 'absolute',\r\n    //       width: '30%'\r\n    //       top: '0px';\r\n    //       left: '0px'\r\n    //   }\r\n};\r\n\r\nclass searchBox extends React.Component {\r\n    constructor(props) {\r\n\r\n    }\r\n}\r\n\r\nexport class Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { lat, lng } = this.props.initialCenter;\r\n\r\n    const directionsService = new this.props.google.maps.DirectionsService();\r\n    const directionsDisplay = new this.props.google.maps.DirectionsRenderer();\r\n    // const searchBox = new this.props.google.maps.places.SearchBox();\r\n    var searchBox = new this.props.google.maps.places.SearchBox(document.getElementById('pac-input'));\r\n\r\n    this.state = {\r\n      currentLocation: {\r\n        lat: lat,\r\n        lng: lng\r\n      },\r\n      destination: {\r\n          lat: 37.868112,\r\n          lng: -122.255033\r\n      },\r\n      directionsService : directionsService,\r\n      directionsDisplay : directionsDisplay,\r\n      searchBox : searchBox,\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    if (this.props.centerAroundCurrentLocation) {\r\n      if (navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n          const coords = pos.coords;\r\n          this.setState({\r\n            currentLocation: {\r\n              lat: coords.latitude,\r\n              lng: coords.longitude\r\n            }\r\n          });\r\n          this.loadMap()\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.google !== this.props.google) {\r\n      this.loadMap();\r\n    }\r\n    if (prevState.currentLocation !== this.state.currentLocation) {\r\n      this.recenterMap();\r\n    }\r\n  }\r\n\r\n  loadMap = () => {\r\n    if (this.props && this.props.google) {\r\n      // checks if google is available\r\n      const { google } = this.props;\r\n      const maps = google.maps;\r\n\r\n      const mapRef = this.refs.map;\r\n\r\n      // reference to the actual DOM element\r\n      const node = ReactDOM.findDOMNode(mapRef);\r\n\r\n      let { zoom } = this.props;\r\n      let { lat, lng } = this.state.currentLocation;\r\n      const center = new maps.LatLng(lat, lng);\r\n      const mapConfig = Object.assign(\r\n        {},\r\n        {\r\n          center: center,\r\n          zoom: zoom\r\n        }\r\n      );\r\n      // maps.Map() is constructor that instantiates the map\r\n      this.map = new maps.Map(node, mapConfig);\r\n      this.state.directionsDisplay.setMap(this.map);\r\n\r\n    //   let destination = { //unit 1\r\n    //     lat: 37.868112,\r\n    //     lng: -122.255033\r\n    //   }\r\n    //   this.displayRoute(destination);\r\n\r\n      var input = document.getElementById('pac-input');\r\n      var searchBox = new google.maps.places.SearchBox(input)\r\n      this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n      var markers = [];\r\n\r\n      searchBox.addListener('places_changed', function() {\r\n          var places = searchBox.getPlaces();\r\n          if (places.length == 0) {\r\n              return;\r\n          }\r\n          markers.forEach(function(marker) {\r\n              marker.setMap(null);\r\n          });\r\n          markers = [];\r\n        //   for each new place, get icon name and location\r\n        //   var bounds = google.LatLngBounds();\r\n          places.forEach((place) => {\r\n              if (!place.geometry) {\r\n                console.log(\"Returned place contains no geometry\");\r\n                return;\r\n              }\r\n              var icon = {\r\n                  url: place.icon,\r\n                  size: google.maps.Size(71, 71),\r\n                  origin: google.maps.Point(0, 0),\r\n                  anchor: google.maps.Point(17, 34),\r\n                  scaledSize: google.maps.Size(25, 25)\r\n              }\r\n            //   Create a marker for each place.\r\n              markers.push(new google.maps.Marker({\r\n                  map: this,\r\n                //   i called this.map earlier didnt work\r\n                  icon: icon,\r\n                  title: place.name,\r\n                  position: place.geometry.location\r\n              }));\r\n              console.log(place.name);\r\n            //   console.log(place.geometry.location.lat())\r\n            //   console.log(place.geometry.location.lng())\r\n            //   destination = {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()}\r\n\r\n              var getLatLng = new Promise(function(resolve, reject) {\r\n                  var lat = place.geometry.location.lat()\r\n                  var lng = place.geometry.location.lng()\r\n                  var dest = {lat, lng}\r\n                  resolve(dest)\r\n              })\r\n\r\n              var getLatLngCallback = (value) => {\r\n                  console.log(\"value:\")\r\n                  console.log(value)\r\n                  console.log(this.state)\r\n                  console.log(\"state\")\r\n                  // this.setState((state) => {\r\n                  //     return {destination: value}\r\n                  // }, () => {\r\n                  //     console.log(this.state.destination)\r\n                  //     this.loadMap()\r\n                  // });\r\n                  this.setState({\r\n                      destination : value\r\n                  });\r\n              }\r\n\r\n              getLatLng.then((value) => {\r\n                //   console.log(\"value:\")\r\n                //   console.log(value)\r\n                //   console.log(this.state)\r\n                //   console.log(\"state\")\r\n                //   this.setState((state) => {\r\n                //       return {destination: value}\r\n                //   }, () => {\r\n                //       console.log(this.state.destination)\r\n                //       this.loadMap()\r\n                //   });\r\n                getLatLngCallback(value)\r\n              })\r\n\r\n            //   if (place.geometry.viewport) {\r\n            //       // Only geocodes have viewport.\r\n            //       bounds.union(place.geometry.viewport);\r\n            //     } else {\r\n            //       bounds.extend(place.geometry.location);\r\n            //     }\r\n          })\r\n        //   this.map.fitBounds(bounds)\r\n\r\n    });\r\n      console.log(this.state)\r\n      this.displayRoute(this.state.destination)\r\n    //  need to call displayRoute here\r\n\r\n    }\r\n}\r\n\r\n\r\ndisplayRoute(destination) { //display route from current location to specified destination\r\n    this.state.directionsService.route({\r\n        origin: new this.props.google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng),\r\n        destination: new this.props.google.maps.LatLng(destination.lat, destination.lng),\r\n        travelMode: this.props.google.maps.TravelMode['WALKING']\r\n        }, (response, status) => {\r\n            if (status === 'OK') {\r\n                console.log(this.state.currentLocation);\r\n                this.state.directionsDisplay.setDirections(response);\r\n\r\n            } else {\r\n                window.alert('Directions request failed due to: ' + status);\r\n            }\r\n        })\r\n  }\r\n\r\n\r\n  recenterMap() {\r\n    const map = this.map;\r\n    const current = this.state.currentLocation;\r\n\r\n    const google = this.props.google;\r\n    const maps = google.maps;\r\n\r\n    if (map) {\r\n      let center = new maps.LatLng(current.lat, current.lng);\r\n      map.panTo(center);\r\n    }\r\n  }\r\n\r\n\r\n  renderChildren() {\r\n    const { children } = this.props;\r\n\r\n    if (!children) return;\r\n\r\n\r\n    return React.Children.map(children, c => {\r\n      if (!c) return;\r\n      return React.cloneElement(c, {\r\n        map: this.map,\r\n        google: this.props.google,\r\n        mapCenter: this.state.currentLocation\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props);\r\n    const style = Object.assign({}, mapStyles.map);\r\n    const stylesearchbar = Object.assign({}, searchboxStyles.searchbox);\r\n\r\n\r\n    return (\r\n      <div>\r\n          <div style={stylesearchbar}>\r\n            <input id=\"pac-input\" class=\"controls\" type=\"text\" placeholder=\"Search box\"/>\r\n          </div>\r\n\r\n        <div id=\"map\" style={style} ref=\"map\">\r\n          Loading map...\r\n        </div>\r\n        {this.renderChildren()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n\r\n\r\nMap.defaultProps = {\r\n  zoom: 14,\r\n  initialCenter: {\r\n    lat: 37.871295,\r\n    lng: -122.260314\r\n  },\r\n  centerAroundCurrentLocation: true,\r\n  visible: true\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\nimport { InfoWindow, Marker } from 'google-maps-react';\r\nimport CurrentLocation from './Map';\r\nimport Places from 'google-maps-react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport class MapContainer extends Component {\r\n\r\n    state = {\r\n        showingInfoWindow: false,\r\n        activeMarker: {},\r\n        selectedPlace: {}\r\n    };\r\n\r\n    onMarkerClick = (props, marker, e) =>\r\n        this.setState({\r\n            selectedPlace: props,\r\n            activeMarker: marker,\r\n            showingInfoWindow: true\r\n        });\r\n\r\n    onClose = props => {\r\n        if (this.state.showingInfoWindow === true) {\r\n            this.setState({\r\n                showingInfoWindow: false,\r\n                activeMarker: null,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n            <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\r\n            </CurrentLocation>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyDfaCamdV4CSw1jBTG8NZeem0YG6kguM3s'\r\n})(MapContainer);\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport MapContainer from './MapContainer.js'\r\n\r\n// import {GoogleApiComponent} from 'google-maps-react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\nimport { InfoWindow, Marker } from 'google-maps-react';\r\nimport CurrentLocation from './Map';\r\nimport Places from 'google-maps-react';\r\nimport axios from 'axios';\r\n\r\nimport ReactDOM from 'react-dom';\r\n// import * as ReactDOM from 'react-dom'\r\n\r\nclass Signup extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {username: 'u', password: 'p', first: 'f', last: 'l'};\r\n\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.submitClicked= this.submitClicked.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        switch (event.target.id) {\r\n            case \"username\":\r\n                this.setState({username: event.target.value});\r\n                break;\r\n            case \"password\":\r\n                this.setState({password: event.target.value});\r\n                break;\r\n            case \"first\":\r\n                this.setState({first: event.target.value});\r\n                break;\r\n            case \"last\":\r\n                this.setState({last: event.target.value});\r\n        }\r\n        console.log(event.target.id)\r\n    }\r\n\r\n    submitClicked = () => {\r\n        alert('submit clicked!')\r\n        console.log(this.state)\r\n\r\n        axios.post(\"/signup\", {\r\n            email: this.state.username,\r\n            password: this.state.password,\r\n            firstName: this.state.first,\r\n            lastName: this.state.last\r\n        }).then(response => {\r\n            console.log(response.data);\r\n        })\r\n    }\r\n\r\n    loginClicked = () => {\r\n      // export default GoogleApiWrapper({\r\n      //   apiKey: 'AIzaSyDfaCamdV4CSw1jBTG8NZeem0YG6kguM3s'\r\n      // })(MapContainer);\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Router>\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n            <label> Username:\r\n            <input type=\"text\" id=\"username\" username={this.state.username} onChange={this.handleChange} />\r\n          </label>\r\n\r\n          <label> Password:\r\n          <input type=\"text\" id=\"password\" password={this.state.password} onChange={this.handleChange} />\r\n          </label>\r\n\r\n          <label> First:\r\n          <input type=\"text\" id=\"first\" first={this.state.first} onChange={this.handleChange} />\r\n        </label>\r\n\r\n        <label> Last:\r\n        <input type=\"text\" id=\"last\" last={this.state.last} onChange={this.handleChange} />\r\n      </label>\r\n          <br/>\r\n          <input type=\"submit\" username=\"Submit\" onClick={this.submitClicked}/>\r\n            <Link to=\"/Map\">\r\n              <button username=\"login\" id=\"loginbutton\" onClick={this.loginClicked}>LOGIN</button>\r\n            </Link>\r\n            <Route path=\"/Map/\" component={MapContainer} />\r\n        </header>\r\n        </Router>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nSignup.defaultProps = {\r\n    value: '',\r\n    username: \"username\",\r\n    password: \"password\"\r\n}\r\nexport default Signup\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
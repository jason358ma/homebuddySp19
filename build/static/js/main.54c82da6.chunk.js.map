{"version":3,"sources":["logo.svg","Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mapStyles","position","width","height","Map","React","Component","_React$Component2","props","_this2","Object","classCallCheck","this","_this2$props$initialC","possibleConstructorReturn","getPrototypeOf","call","initialCenter","lat","lng","directionsService","google","maps","DirectionsService","directionsDisplay","DirectionsRenderer","searchBox","places","SearchBox","document","getElementById","state","currentLocation","inherits","createClass","key","value","_this3","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","prevProps","prevState","recenterMap","mapRef","refs","map","node","ReactDOM","findDOMNode","zoom","_this$state$currentLo","center","LatLng","mapConfig","assign","setMap","displayRoute","input","controls","ControlPosition","TOP_LEFT","push","destination","_this4","route","origin","travelMode","TravelMode","response","status","console","log","setDirections","window","alert","current","panTo","_this5","children","Children","c","cloneElement","mapCenter","style","react_default","a","createElement","id","class","type","placeholder","ref","renderChildren","defaultProps","visible","Signup","submitClicked","axios","post","email","username","password","firstName","first","lastName","last","handleChange","bind","assertThisInitialized","event","target","className","src","logo","alt","onChange","onClick","Boolean","location","hostname","match","render","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54c82da6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios'\n\n\nconst mapStyles = {\n    map: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%'\n    },\n};\n\nconst searchboxStyles = {\n    position: 'absolute',\n    width: '30%'\n}\n\nclass searchBox extends React.Component {\n    constructor(props) {\n\n    }\n}\n\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n\n    const directionsService = new this.props.google.maps.DirectionsService();\n    const directionsDisplay = new this.props.google.maps.DirectionsRenderer();\n    // const searchBox = new this.props.google.maps.places.SearchBox();\n    var searchBox = new this.props.google.maps.places.SearchBox(document.getElementById('pac-input'));\n\n\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      },\n      directionsService : directionsService,\n      directionsDisplay : directionsDisplay,\n      searchBox : searchBox,\n    };\n  }\n\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n          this.loadMap()\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      let { lat, lng } = this.state.currentLocation;\n    //   console.log(lat, lng);\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n      this.state.directionsDisplay.setMap(this.map);\n      let destination = { //unit 1\n        lat: 37.868112,\n        lng: -122.255033\n      }\n      this.displayRoute(destination);\n\n\n      var input = document.getElementById('pac-input');\n      var searchBox = google.maps.places.SearchBox(input)\n      this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n      var markers = [];\n    //   searchBox.addListener('places_changed', function() {\n    //       var places = searchBox.getPlaces();\n    //       if (places.length == 0) {\n    //           return;\n    //       }\n    //       markers.forEach(function(marker) {\n    //           marker.setMap(null);\n    //       });\n    //       markers = [];\n    //       var bounds = google.LatLngBounds();\n    //       places.forEach(function(place) {\n    //           if (!place.geometry) {\n    //             console.log(\"Returned place contains no geometry\");\n    //             return;\n    //           }\n    //           var icon = {\n    //               url: place.icon,\n    //               size: google.maps.Size(71, 71),\n    //               origin: google.maps.Point(0, 0),\n    //               anchor: google.maps.Point(17, 34),\n    //               scaledSize: google.maps.Size(25, 25)\n    //           }\n    //       })\n      //\n    //   });\n    }\n  }\n\n  displayRoute(destination) { //display route from current location to specified destination\\\n    this.state.directionsService.route({\n        origin: new this.props.google.maps.LatLng(this.state.currentLocation.lat, this.state.currentLocation.lng),\n        destination: new this.props.google.maps.LatLng(destination.lat, destination.lng),\n        travelMode: this.props.google.maps.TravelMode['WALKING']\n        }, (response, status) => {\n            if (status === 'OK') {\n                console.log(this.state.currentLocation);\n                this.state.directionsDisplay.setDirections(response);\n\n            } else {\n                window.alert('Directions request failed due to: ' + status);\n            }\n        })\n  }\n\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    // console.log(this.props);\n    const style = Object.assign({}, mapStyles.map);\n\n    return (\n      <div>\n          <div>\n            <input id=\"pac-input\" class=\"controls\" type=\"text\" placeholder=\"Search Box\"/>\n          </div>\n\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\nexport default Map;\n\n\nMap.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 37.871295,\n    lng: -122.260314\n  },\n  centerAroundCurrentLocation: true,\n  visible: true\n};\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// import {GoogleApiComponent} from 'google-maps-react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport { InfoWindow, Marker } from 'google-maps-react';\nimport CurrentLocation from './Map';\nimport Places from 'google-maps-react';\nimport axios from 'axios';\n\n\nimport ReactDOM from 'react-dom';\n// import * as ReactDOM from 'react-dom'\n\nexport class MapContainer extends Component {\n\n    state = {\n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedPlace: {}\n    };\n\n    onMarkerClick = (props, marker, e) =>\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n\n    onClose = props => {\n        if (this.state.showingInfoWindow === true) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null,\n            });\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n            <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\n            </CurrentLocation>\n            </div>\n        );\n    }\n}\n\n// export default GoogleApiWrapper({\n//   apiKey: 'AIzaSyDfaCamdV4CSw1jBTG8NZeem0YG6kguM3s'\n// })(MapContainer);\n\n\n\n\n\n\n\n\n\n\n\n// ha what is going on??\n\n\n\nclass Signup extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {username: 'u', password: 'p', first: 'f', last: 'l'};\n\n      this.handleChange = this.handleChange.bind(this);\n      this.submitClicked= this.submitClicked.bind(this);\n    }\n\n    handleChange(event) {\n        if (event.target.id === \"password\") {\n            this.setState({password: event.target.value});\n        } else {\n            this.setState({\n                username: event.target.value,\n                first: event.target.value,\n                last: event.target.value\n            });\n        }\n        console.log(event.target.id)\n    }\n\n    submitClicked = () => {\n        alert('submit clicked!')\n        console.log(this.state)\n\n        axios.post(\"/signup\", {\n            email: this.state.username,\n            password: this.state.password,\n            firstName: this.state.first,\n            lastName: this.state.last\n        })\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n            <label> Username:\n            <input type=\"text\" id=\"username\" username={this.state.username} onChange={this.handleChange} />\n          </label>\n\n          <label> Password:\n          <input type=\"text\" id=\"password\" password={this.state.password} onChange={this.handleChange} />\n          </label>\n\n          <label> First:\n          <input type=\"text\" id=\"username\" first={this.state.first} onChange={this.handleChange} />\n        </label>\n\n        <label> Last:\n        <input type=\"text\" id=\"username\" last={this.state.last} onChange={this.handleChange} />\n      </label>\n          <br/>\n          <input type=\"submit\" username=\"Submit\" onClick={this.submitClicked}/>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nSignup.defaultProps = {\n    value: '',\n    username: \"username\",\n    password: \"password\"\n}\nexport default Signup\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}